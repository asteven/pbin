#!/usr/bin/env python
#
# 2012 Steven Armstrong
#
# Moves i3 workspaces to outputs.
#
# Depends on i3-py [1], install like:
#   archlinux: yaourt -S i3-py
#   *: pip install i3-py
#
# [1] https://github.com/ziberna/i3-py
#
#
# This code is in the public domain, do with it whatever you like.
#

import sys
import argparse
import time
import logging
logging.basicConfig(level=logging.ERROR, format='%(levelname)s: %(message)s', stream=sys.stderr)
log = logging

try:
    import i3
except ImportError:
    print('You have to install i3-py [1] to use this.\n'
    '[1] https://github.com/ziberna/i3-py\n', file=sys.stderr)
    raise


def main(args):
    # get currently focused workspace
    current_workspace = [ws for ws in i3.get_workspaces() if ws['focused']][0]
    log.debug('current_workspace: {0}'.format(current_workspace))
    if args.workspaces:
        # move the given workspaces
        for workspace in args.workspaces:
            log.info('moving workspace {0} to output {1}'.format(workspace, args.output))
            # focus
            i3.workspace(workspace)
            # move
            i3.move('workspace to output {0}'.format(args.output))
    else:
        # move the current workspace
        i3.move('workspace to output {0}'.format(args.output))
    # restore focus to current workspace
    time.sleep(0.1)
    i3.workspace(current_workspace['name'])


def parse_args(argv):
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true', default=False,
        help='set log level to debug')
    parser.add_argument('-v', '--verbose', action='store_true', default=False,
        help='be verbose, set log level to info')
    parser.add_argument('workspaces',
        nargs='*',
        help='list of workspace names')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-o', '--output', 
        help='to which output to move the given workspaces. e.g. HDMI1, VGA1, up, down')
    for output in 'up down left right'.split():
        group.add_argument('--{}'.format(output), dest='output', 
            action='store_const', const=output,
            help='move the given workspaces to the output \'{}\''.format(output))
        
    args = parser.parse_args(argv)
    if args.verbose:
        logging.root.setLevel(logging.INFO)
    if args.debug:
        logging.root.setLevel(logging.DEBUG)

    log.debug(args)
    return args


if __name__ == '__main__':
    args = parse_args(sys.argv[1:])
    main(args)
